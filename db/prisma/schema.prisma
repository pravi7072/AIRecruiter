// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your database provider
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String? // for credentials login
  image   String?
  emailVerified  DateTime?  
  verifyToken    String? 
  credits   Int      @default(4)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  interviews Interview[]
  accounts  Account[]
  sessions  Session[]
}
model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id        String   @id @default(cuid())
  sessionToken String @unique
  userId    String
  expires   DateTime  @default(now()) 
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId], name: "idx_session_user_id")
}
model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@id([identifier, token])
}

model Interview {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration     String?
  questions   Json // JSON string of questions
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  feedback    Feedback[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback{
  id          String   @id @default(cuid())
  name        String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  feed        Json
  interviewId String
  recommendation Boolean
  interview   Interview @relation(fields: [interviewId],references: [id],onDelete: Cascade)
}
